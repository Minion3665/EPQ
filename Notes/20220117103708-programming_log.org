:PROPERTIES:
:ID:       956c4043-ffaa-45d6-be32-6219c21ea597
:END:
#+title: Programming log
* Layout
- Each new problem will be under a heading, roughly in chronological order that I came across them (although problems that I anticipated and solved beforehand may be placed later, as it will be more logical and easier to read)
- If there's a problem I believed I had solved but had not, I may list it multiple times, once when I initally solved it and subsequent times when I was forced to change and improve my solution. I will mention if this is the case
- I'll rate each problem with a difficulty (1-5)
- I'll explain how I solved each problem
- I'll state how coming to this solution helped me to learn

* Building containers programatically
- Difficulty: 2
** How did I solve it?
[[https://github.com/ClicksMinutePer/process-manager/blob/097983953dc613702b9ea1a350496a0f90c4113e/containerManager/main.go#L80][This line]] sets up the command that needs to be run in order to build the container
#+begin_src go
	cmd := exec.Command("nix-build", "./containerManager/config/"+id+"/"+version+".nix")
#+end_src
and [[https://github.com/ClicksMinutePer/process-manager/blob/097983953dc613702b9ea1a350496a0f90c4113e/containerManager/main.go#L85][this line]] runs the command
#+begin_src go
	err := cmd.Run()
#+end_src
Inbetween I redirect the output and errors from the process to my terminal so I can see if there's any problems while it's building
#+begin_src go
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
#+end_src

I grabbed the default Nix config for docker containers, a container to say 'hello world' and built it using my script.
#+begin_src nix
{ pkgs ? import <nixpkgs> { }
, pkgsLinux ? import <nixpkgs> { system = "x86_64-linux"; }
}:

pkgs.dockerTools.buildImage {
  name = "hello-docker";
  config = {
    Cmd = [ "${pkgsLinux.hello}/bin/hello" ];
  };
}
#+end_src
Finally, I loaded the built file in docker and ran it
#+begin_src bash
  docker load < result
  docker start -t {type}
#+end_src

This worked, and I got hello world in my console!
** What resources did I use?
I used [[https://nixos.org/guides/building-and-running-docker-images.html][this nixos guide]] and [[https://stackoverflow.com/a/31737077][this stackoverflow answer]] to help me understand the Nix and go sides of running commands.
** How did this help me learn?
This taught me how to use Nix to build docker containers.

* Sleep command was overwritten by CNI
- Difficulty 3
** What was the problem?
This /wasn't/ a problem with my EPQ, but rather was a problem with the impact it had on the rest of my system.

Linux has a command called =sleep=; it takes a number afterwards for how many seconds you need to sleep (for example =sleep 5= should sleep 5 seconds).[cite:@sleep_3]

Unfortunately, CNI also [[https://github.com/containernetworking/cni/blob/master/plugins/test/sleep/main.go][provides a sleep command]]. The important thing to notice in that code is here: =time.Sleep(60 * time.Second)=. This means that the CNI sleep command will always sleep for 60 seconds, no matter what.

The CNI sleep command was running instead of the default sleep command when I ran sleep on my system, which meant that everything that needed to sleep for just a little bit was running really, really slowly.
** How did I solve it?
As it's quite often that I need to find out what package a command comes from I decided to write a shell script to find out:
#+begin_src bash
#!/usr/bin/env bash
if [ "$1" = "" ]
then
  read -ep "What command are you looking for?: " CMD
else
  CMD=$1
fi

LOCATION=$(command -V "$CMD" 2>&1 | sed -rn "s/.* (.*)$/\1/p")

if [ "$LOCATION" = "found" ] # Not found
then
  echo "The command $CMD wasn't found"
  exit 1
fi

if [ "$LOCATION" = "builtin" ] # Shell builtin
then
  echo "The command $CMD is a shell builtin"
  exit 0
fi

RESOLVED_LOCATION=$(readlink -f "$LOCATION")

if [[ ! "$RESOLVED_LOCATION" =~ ^\/nix\/store\/.*-.*-.*$ ]];
then
  echo "The command $CMD is at $RESOLVED_LOCATION"
  exit 0
fi

PACKAGE=$(echo "$RESOLVED_LOCATION" | sed -rn "s/\/nix\/store\/.*-(.*)-.*/\1/p")

SEARCHED=$(nix search "nixpkgs#$PACKAGE" 2>&1)

if [ "$SEARCHED" = "error: no results for the given search term(s)!" ]
then
  echo "The command $CMD is at $RESOLVED_LOCATION"
  exit 0
fi

echo "The command $CMD is from:"
echo "$SEARCHED"
echo "Which is available at $RESOLVED_LOCATION"
#+end_src
This script takes a package name as input and tries to resolve it to a nix package; when I ran it for sleep it showed me that sleep was from the CNI package
#+begin_src bash
{11:22}~ âž­ bin/provider sleep
The command sleep is from:
\* legacyPackages.x86_64-linux.cni (0.8.1)
  Container Network Interface - networking for Linux containers
Which is available at /nix/store/ps4v6qqayxhndmfj6pq6l4gqdglyz5pc-cni-0.8.1/bin/sleep
#+end_src
I [[https://search.nixos.org/packages?channel=21.11&from=0&size=50&sort=relevance&type=packages&query=cni][searched for CNI on the nix package repo]] and found that it was installed from [[https://github.com/containernetworking/cni][this github repo]]. I searched the repo and found [[https://github.com/containernetworking/cni/blob/c5ab1c3fc6e164e7b777c3002e75fdf46865e1b3/plugins/test/sleep/main.go][this file]], which contains the broken code, confirming that it was definitely a broken sleep command from CNI.

To fix it I looked at what the CNI package did; was 'sleep' needed? I found that actually the main =containerd= package and the =cni-plugins= package actually have enough stuff to run the network for my EPQ as I was doing before. In the end the solution turned out to be as simple as just uninstalling the CNI package like so:
#+begin_src diff
diff --git a/system/containerd/systemPackages.nix b/system/containerd/systemPackages.nix
index 6a80afc..f7cd953 100644
--- a/system/containerd/systemPackages.nix
+++ b/system/containerd/systemPackages.nix
@@ -1,6 +1,5 @@
 { pkgs, ... }: {
   systemPackages = with pkgs; [
-    cni
     cni-plugins
   ];
 }
#+end_src
** What resources did I use?
- The sleep manual page
- The source of the CNI package
- The nix manual to figure out the =nix search= command
- Various stackoverflow threads to help with writing a bash script
** How did this help me learn?
- This helped me gain better familiarity with nix
- This taught me to look at what packages I need better rather than installing anything vaguely related to CNI, say, and to install in a local scope unless I need a package globally
 
